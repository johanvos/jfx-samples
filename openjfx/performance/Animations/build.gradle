apply plugin:'application'

repositories {
    mavenCentral()
}

def getOSName() {
    final String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("linux")) {
        return ("linux");
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("mac");
    } else if (osName.contains("windows")) {
        return ("win");
    }
    return ("");
}

ext.platform = getOSName()

mainClassName = "animations.TranslatedRectangle"

dependencies {
    compile "org.openjfx:javafx-controls:11-ea+19:${platform}"
    compile "org.openjfx:javafx-graphics:11-ea+19:${platform}"
    compile "org.openjfx:javafx-base:11-ea+19:${platform}"
    compile "org.openjfx:javafx-fxml:11-ea+19:${platform}"
    compile "org.openjfx:javafx-web:11-ea+19:${platform}"
    compile "org.openjfx:javafx-media:11-ea+19:${platform}"
    compile "org.openjfx:javafx-swing:11-ea+19:${platform}"
}

jar {
    manifest.attributes("Main-Class": mainClassName)
}

def excludedArtifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts.findAll {
    it.moduleVersion.id.group == 'org.openjfx' && it.classifier != platform
}

compileJava {
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.swing,javafx.web'
        ]
        classpath = files()
    }
}

run {
    doFirst {
        classpath -= files(excludedArtifacts.collect { it.file })
        jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.swing,javafx.web'
        ]
        classpath = sourceSets.main.output
    }
}
