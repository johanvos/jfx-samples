/*
 * Copyright (c) 2018, OpenJFX and/or its affiliates.
 * All rights reserved. Use is subject to license terms.
 *
 * This file is available and licensed under the following license:
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  - Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the distribution.
 *  - Neither the name of OpenJFX nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
apply plugin:'application'

repositories {
    mavenCentral()
}

mainClassName = "ensemble.EnsembleApp"

def FileCollection apachecp = files(
   "./lib/lucene-core-7.1.0.jar",
   "./lib/lucene-grouping-7.1.0.jar",
   "./lib/lucene-queryparser-7.1.0.jar")

sourceSets {
    main {
        java {
            srcDirs 'src/app/java',
                    'src/generated/java',
                    'src/samples/java'
        }
        resources {
            srcDirs 'src/app/resources',
                    'src/generated/resources',
                    'src/samples/resources'
        }
        // compileClasspath += apachecp
    }
}
def getOSName() {
    final String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("linux")) {
        return ("linux");
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("mac");
    } else if (osName.contains("windows")) {
        return ("win");
    }
    return ("");
}

ext.platform = getOSName()

dependencies {
    compile "org.openjfx:javafx-controls:11-ea+19:${platform}"
    compile "org.openjfx:javafx-graphics:11-ea+19:${platform}"
    compile "org.openjfx:javafx-base:11-ea+19:${platform}"
    compile "org.openjfx:javafx-fxml:11-ea+19:${platform}"
    compile "org.openjfx:javafx-web:11-ea+19:${platform}"
    compile "org.openjfx:javafx-media:11-ea+19:${platform}"
    compile "org.openjfx:javafx-swing:11-ea+19:${platform}"
    // compile "org.apache.lucene:lucene-core:7.1.0"
    compile "org.apache.lucene:lucene-grouping:7.1.0"
    compile "org.apache.lucene:lucene-queryparser:7.4.0"
}


def excludedArtifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts.findAll {
    (it.moduleVersion.id.group == 'org.openjfx' && it.classifier != platform ) || it.name == 'lucene-sandbox'
}

def externalLibs = configurations.compile.resolvedConfiguration.resolvedArtifacts.findAll {
    (it.name.startsWith('lucene'))
}

compileJava {
    doFirst {
        classpath -= files(excludedArtifacts.collect { it.file })
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.swing,javafx.web,lucene.queryparser',
            '-encoding', 'UTF-8'
        ]
        classpath = files()
    }
}

run {
    doFirst {
        classpath -= files(excludedArtifacts.collect { it.file })
        jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.swing,javafx.web,lucene.queryparser'
        ]
        classpath = sourceSets.main.output
    }
}


jar {
    manifest.attributes("Main-Class": mainClassName)

    // add in the sample sources....
    from fileTree('src/samples/java')
    from (files(externalLibs.collect{it.file})) {
        into ("lib")
    }

    // Note: this would be the "gradle" way to add in the Lucene jars
    // BUT we run into total path length on Windows with the temp file in ./build
    //apachecp.each { from zipTree(it) }
    //exclude 'META-INF/*'
}

// Merge the Apache Lucene jars into our master jar.
// jar.doLast() {
//     ant.zip(destfile: jar.archivePath, update: true, duplicate: "preserve") {
//         zipgroupfileset(dir: new File("./lib"), includes:"*.jar")
//     }
// }

